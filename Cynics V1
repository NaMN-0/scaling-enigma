// Order in set

#include <iostream>
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ordered_set_less tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set_greater tree<int, null_type,greater_equal<int>, rb_tree_tag,tree_order_statistics_node_update>


#define ll long long int
#define ld long double
#define MAX 200010
#define MOD 1000000007
#define INF 1e15
#define fast ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pi 3.14159265358979323846
#define endl "\n"
#define coutflg if(flg){cout << "YES\n";}else{cout << "NO\n";}
#define coutyes cout << "YES\n";
#define coutno cout << "NO\n";
#define flush fflush(stdout);
#define fixedprec cout << fixed << setprecision(18);

// sieve

vector<bool> prime(MAX,true);

void sieve(){
	prime[0] = prime[1] = false;
	ll n = MAX-1;
	for(ll i=2;i*i<=n;i++){
		if(prime[i]){
			for(ll j=i*i;j<=n;j+=i){
				prime[j] = false;
			}
		}
	}
}

// power

ll power(ll a, ll b){
	ll res = 1;
	while(b>0){
		if(b&1){
			res *= a;
			// res %= MOD;
		}
		b >>= 1;
		a = a*a;
		// a %= MOD;
	}
	return res;
}

// gcd

ll gcd(ll a, ll b){
	if(!a){
		return b;
	}
	return gcd(b%a,a);
}

// DSU

ll par[MAX];
ll sz[MAX];

void make_set(){
    for(ll i=0;i<MAX;i++){
        par[i] = i;
        sz[i] = 1;
    }
}

ll find_set(ll a){
    if(a==par[a]){
        return a;
    }
    return par[a] = find_set(par[a]);
}

void union_set(ll a, ll b){
    a = par[a];
    b = par[b];
    if(a!=b){
        if(sz[a]<sz[b]){
            swap(a,b);
        }
        sz[a] += sz[b];
        par[b] = a;
    }
}

// segment tree

ll n;
ll t[4*MAX];
ll ar[MAX];
 
void build(ll v,ll tl, ll tr){
    if(tl==tr){
        t[v] = ar[tl];
    }
    else{
        ll tm = tl + (tr-tl)/2;
        build(2*v,tl,tm);
        build(2*v+1,tm+1,tr);
        t[v] = t[2*v] + t[2*v+1];       // change
    }
}
 
ll query(ll v, ll tl, ll tr, ll l, ll r){
    if(l>r){
        return 0;       // change
    }
    else if(l==tl && r==tr){
        return t[v];
    }
    ll tm = tl + (tr-tl)/2;
    return query(2*v,tl,tm,l,min(tm,r)) + query(2*v+1,tm+1,tr,max(l,tm+1),r);       // change
}
 
void update(ll v, ll tl, ll tr, ll pos, ll val){
    if(tl==tr){
        t[v] = val;
    }
    else{
        ll tm = tl + (tr-tl)/2;
        if(pos<=tm){
            update(2*v,tl,tm,pos,val);
        }
        else{
            update(2*v+1,tm+1,tr,pos,val);
        }
        t[v] = t[2*v] + t[2*v+1];       // change
    }
}

void solve(){
	
}

int main(){
    fast
    ll t,q;
    q = 1;
    // cin >> q;
    for(t=1;t<=q;t++){
        // cout << "Case #" << t << ": ";
        solve();
    }
}

// Order in set
void fun(){
    ordered_set_less o_set_less;
    ordered_set_greater o_set_greater;
    ll x = req;
	ll cnt_less = o_set_less.order_of_key(x);
    ll cnt_greater = o_set_greater.order_of_key(x);
    o_set_less.insert(i);
    o_set_greater.insert(i);
}

// time calculation

int main(){

    auto begin = std::chrono::high_resolution_clock::now();

    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        // freopen("output.txt", "w", stdout);
    #endif

    fast
    ll t,q;
    q = 1;
    // cin >> q;
    for(t=1;t<=q;t++){
        // cout << "Case #" << t << ": ";
        solve();
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
    cerr << "Time measured: " << elapsed.count() * 1e-9 << " seconds.\n"; 

}
